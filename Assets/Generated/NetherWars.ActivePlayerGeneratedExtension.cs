//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        static readonly NetherWars.ActivePlayer activePlayerComponent = new NetherWars.ActivePlayer();

        public bool isActivePlayer {
            get { return HasComponent(ComponentIds.ActivePlayer); }
            set {
                if (value != isActivePlayer) {
                    if (value) {
                        AddComponent(ComponentIds.ActivePlayer, activePlayerComponent);
                    } else {
                        RemoveComponent(ComponentIds.ActivePlayer);
                    }
                }
            }
        }

        public Entity IsActivePlayer(bool value) {
            isActivePlayer = value;
            return this;
        }
    }

    public partial class Pool {
        public Entity activePlayerEntity { get { return GetGroup(Matcher.ActivePlayer).GetSingleEntity(); } }

        public bool isActivePlayer {
            get { return activePlayerEntity != null; }
            set {
                var entity = activePlayerEntity;
                if (value != (entity != null)) {
                    if (value) {
                        CreateEntity().isActivePlayer = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {
        static IMatcher _matcherActivePlayer;

        public static IMatcher ActivePlayer {
            get {
                if (_matcherActivePlayer == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.ActivePlayer);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherActivePlayer = matcher;
                }

                return _matcherActivePlayer;
            }
        }
    }
}
