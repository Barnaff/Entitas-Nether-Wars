//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public NetherWars.TurnCount turnCount { get { return (NetherWars.TurnCount)GetComponent(ComponentIds.TurnCount); } }

        public bool hasTurnCount { get { return HasComponent(ComponentIds.TurnCount); } }

        public Entity AddTurnCount(int newValue) {
            var component = CreateComponent<NetherWars.TurnCount>(ComponentIds.TurnCount);
            component.Value = newValue;
            return AddComponent(ComponentIds.TurnCount, component);
        }

        public Entity ReplaceTurnCount(int newValue) {
            var component = CreateComponent<NetherWars.TurnCount>(ComponentIds.TurnCount);
            component.Value = newValue;
            ReplaceComponent(ComponentIds.TurnCount, component);
            return this;
        }

        public Entity RemoveTurnCount() {
            return RemoveComponent(ComponentIds.TurnCount);
        }
    }

    public partial class Pool {
        public Entity turnCountEntity { get { return GetGroup(Matcher.TurnCount).GetSingleEntity(); } }

        public NetherWars.TurnCount turnCount { get { return turnCountEntity.turnCount; } }

        public bool hasTurnCount { get { return turnCountEntity != null; } }

        public Entity SetTurnCount(int newValue) {
            if (hasTurnCount) {
                throw new EntitasException("Could not set turnCount!\n" + this + " already has an entity with NetherWars.TurnCount!",
                    "You should check if the pool already has a turnCountEntity before setting it or use pool.ReplaceTurnCount().");
            }
            var entity = CreateEntity();
            entity.AddTurnCount(newValue);
            return entity;
        }

        public Entity ReplaceTurnCount(int newValue) {
            var entity = turnCountEntity;
            if (entity == null) {
                entity = SetTurnCount(newValue);
            } else {
                entity.ReplaceTurnCount(newValue);
            }

            return entity;
        }

        public void RemoveTurnCount() {
            DestroyEntity(turnCountEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherTurnCount;

        public static IMatcher TurnCount {
            get {
                if (_matcherTurnCount == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.TurnCount);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherTurnCount = matcher;
                }

                return _matcherTurnCount;
            }
        }
    }
}
